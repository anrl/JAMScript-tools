#!/bin/bash

IDIR="${BASH_SOURCE%/*}"
if [[ ! -d "$IDIR" ]]; then IDIR="$PWD"; fi
source "$IDIR/inc/misc_tools.sh"

SHELLPID=$$
trap cleanup SIGTERM SIGINT

die() {
    printf '%s\n' "$1" >&2
    exit 1
}


MOSQUITTO=`which mosquitto`
MOSQUITTO_PUB=`which mosquitto_pub`
TMUX=`which tmux`

if [ -z $MOSQUITTO ]; then
    die "mosquitto (MQTT broker) not installed. Quitting."
fi
if [ -z $MOSQUITTO_PUB ]; then
    die "mosquitto_pub (MQTT tools) not installed. Quitting."
fi
if [ -z $TMUX ]; then
    die "tmux not installed. Quitting."
fi


show_usage() {
    cat << EOF
jamrun program.jxe
Runs J and C node, one each, of a device with program.jxe
under a default application name 'app-N'. To run under a different
app name X, use the --app=X option.

jamrun program.jxe --fog
Runs a fog node (only J node) with program.jxe. Similarly, the --cloud
flag runs a cloud node.

By default, jamrun uses a Redis server running at 127.0.0.1:6379 as the
data store. The Redis server needs to be started before launching the
application. To use a different Redis server use the --data option.

jamrun program.jxe --data=127.0.0.1:7000
Runs program.jxe and connects it to an already running Redis server at
port 7000 of the local host. Redis server can run outside the
local host (Redis needs to the configured to accept outside
connections).

To start more than one C node at a device use the following command.
jamrun program.jxe --num=4

To provide a set of tags to the program, use the following command.
jamrun program.jxe --tag="param1, param2"

Use the --bg option to run a command in the backgroud.

Use the --old option to run the previous version in __jamruns folder.
You can edit that version and rerun a custom version of a file.

Use the --log option to turn on logging. This is useful for programs where
the C side is crashing at the startup. The tmux console would not run when
the program crash at startup. So the --log option allows us to see the
program error messages.


Usage: jamrun file.jxe [--app=appl_name] [--fog|--cloud] [--num=num_c_devs]
                                    [--data=data-url]
                                    [--tags=quoted_list_of_tags]
                                    [--bg]
                                    [--old]
                                    [--log]


The jamrun command creates a run state in the $HOME/__jamrun folder.
EOF
}


create_lock_or_wait() {
    local path="$1"
    local type="$2"
    local wait_time=$((($RANDOM % 10) + 1))
    while true; do
        if mkdir "${path}/lock_${type}"; then
            break
        fi
        sleep $wait_time
    done
}

remove_lock() {
    local path="$1"
    local type="$2"
    rmdir "${path}/lock_${type}"
}






startmqtt() {
    local port=$1

    # Check whether the MQTT server is running.. if not start it
    $MOSQUITTO_PUB -p $port -t "test" -m "hello"
    if [ $? -ne 0 ]; then
        echo "MQTT is not running at $port"
        echo "Attempting to start MQTT at $port"
        $MOSQUITTO -p $port &
    fi
}


dojamout() {
    dojamout_p1 $1 $2 $3
    dojamout_p2 $1 $2 $3
}


dojamout_p1() {
    local type=$1
    local pnum=$2
    local floc=$3

    startmqtt $pnum
    echo "$data" > $floc/$pnum/dataStore
    echo "process" > $floc/$pnum/class
    echo "$SHELLPID" > $floc/$pnum/shellpid
    echo "new" > $floc/$pnum/processId
}


dojamout_p2() {

    if [ -z $bg ]; then
        dojamout_p2_fg $1 $2 $3
    else
        dojamout_p2_bg $1 $2 $3
    fi
}


cleanup() {
    reset
    cleanuptmux
    exit 1
}


check_jamhome() {

    if [ -e jview.json ]; then
        if [ -z `printenv JAMHOME` ]; then
            die "JAMHOME not set. Point JAMHOME to JAMScript installation and restart."
        fi
    fi
}


dojamout_p2_fg() {
    local type=$1
    local pnum=$2
    local floc=$3

    case $type in
        cloud)
            if [ -z "$tags" ]; then
                node jamout.js --app=$jappid --cloud --port=$pnum --data=$data
            else
                node jamout.js --app=$jappid --cloud --port=$pnum --data=$data --tags=$tags
            fi
            ;;
        fog)
            if [ -z "$tags" ]; then
                node jamout.js --app=$jappid --fog --port=$pnum --data=$data
            else
                node jamout.js --app=$jappid --fog --port=$pnum --data=$data --tags=$tags
            fi
            ;;
        device)
            check_jamhome
            (
                if [ -e jview.json ]; then
                    node $JAMHOME/lib/jview/Compiler.js jview.json
                    cp -R $JAMHOME/lib/jview/templates/electron electron
                    cd app
                    node index.js &
                    sleep 2
                    cd ../electron
                    electron .
                fi
            ) &
            echo $! > $floc/$pnum/jviewshell
            if [ -z "$tags" ]; then
                node jamout.js --app=$jappid --port=$pnum --data=$data
            else
                node jamout.js --app=$jappid --port=$pnum --data=$data --tags=$tags
            fi
            kill `cat $floc/$pnum/jviewshell`
            ;;
    esac
}


dojamout_p2_bg() {
    local type=$1
    local pnum=$2
    local floc=$3

    case $type in
        cloud)
            if [ -z "$tags" ]; then
                node jamout.js --app=$jappid --cloud --port=$pnum --data=$data &
                jpid=$!
            else
                node jamout.js --app=$jappid --cloud --port=$pnum --data=$data --tags=$tags &
                jpid=$!
            fi
            ;;
        fog)
            if [ -z "$tags" ]; then
                node jamout.js --app=$jappid --fog --port=$pnum --data=$data &
                jpid=$!
            else
                node jamout.js --app=$jappid --fog --port=$pnum --data=$data --tags=$tags &
                jpid=$!
            fi
            ;;
        device)
            if [ -z "$tags" ]; then
                node jamout.js --app=$jappid --port=$pnum --data=$data &
                jpid=$!
            else
                node jamout.js --app=$jappid --port=$pnum --data=$data --tags=$tags &
                jpid=$!
            fi
            ;;
    esac
}


doaout() {
    local counter=1
    local num=$1
    local port=$2

    if [ -e a.out ]; then
        chmod +x a.out
    fi

    while [ $counter -le $num ]; do
        if [ -e a.out ]; then
            # execute the program.. we are in the folder..
            if [ -z $log ]; then
                if [ -z "$tags" ]; then
                    $TMUX new-session -s $tmuxapp-$counter -d  "./a.out -a $jappid -p $port -n $counter"
                else
                    $TMUX new-session -s $tmuxapp-$counter -d  "./a.out -a $jappid -p $port -t $tags -n $counter"
                fi
            else
                if [ -z "$tags" ]; then
                    if [ `uname` == "Linux" ]; then
                        $TMUX new-session -s $tmuxapp-$counter -d  script -a -c "./a.out -a $jappid -p $port -n $counter" -f log
                    else
                        $TMUX new-session -s $tmuxapp-$counter -d  "script -a -t 1 log ./a.out -a $jappid -p $port -n $counter"
                    fi
                else
                    if [ `uname` == "Linux" ]; then
                        $TMUX new-session -s $tmuxapp-$counter -d  script -a -c "./a.out -a $jappid -p $port -t $tags -n $counter" -f log
                    else
                        $TMUX new-session -s $tmuxapp-$counter -d  "script -a -t 1 log ./a.out -a $jappid -p $port -t $tags -n $counter"
                    fi
                fi
            fi
        fi
        ((counter++))
    done
}

# This is always scanning for a command with 'node'
portavailable() {
    local folder=$1
    local port=$2

    if [ -d $folder/$port ]; then
        if [ -e $folder/$port/processId ]; then
            local pid=`cat $folder/$port/processId`
            if [ $pid == "new" ]; then
                porttaken=1
            elif [ ! -z $pid ]; then
                porttaken=`ps -p $pid | grep node | wc -l | tr -d [:space:]`
            else
                porttaken=0
            fi
        else
            porttaken=0
        fi
    else
        porttaken=0
    fi

}


setuptmux() {

    if [ -z $tmuxid ]; then
        tmuxapp="tg-$RANDOM"
    else
        tmuxapp=$tmuxid
    fi

    echo "$tmuxapp" > $1/tmuxid
    save "$tmuxapp" $appfolder/tmuxid

    trap cleanuptmux SIGINT
}


getappid() {
    local mainf=$1
    local localf=$2
    local appid=$3

    if [ $appid == "app-n" ]; then
        inc_counter $mainf/counter
        save "app-$result" $localf/appid
    else
        save "$appid" $localf/appid
    fi

    jappid=`cat $localf/appid`
    # save for short cut use
    save "$jappid" $appfolder/appid
}


cleanuptmux() {
    if [ ! -z $tmuxapp ]; then
        $TMUX kill-session -t $tmuxapp
    fi
    exit
}



startredis() {

    # Start redis with no protected-mode and at the port
    echo -e "port $1\nprotected-mode no" | redis-server - &
}

waitforredis() {
    local port=$1

    while : ; do
        local present=`ps ax | grep redis-server | grep $port | wc -l | tr -d [:space:]`
        if [ $present == "1" ]; then
            break
        fi
        sleep 1
    done
}



resolvedocker() {
    local name=$1

    local host="${name%:*}"
    local port="${name##*:}"

    startredis $port
    waitforredis $port

    if [ $host == "docker" ]; then
        local ipaddr=`hostname -I`
        name=$ipaddr:$port
    fi
    # trim space left behind by hostname -I
    data=$(echo $name | tr -d [:space:])
}


###
# Main script execution begins here...
#

# Initialize all the option variables.
app=app-n
type=device
data=127.0.0.1:6379
num=1
tags=
bg=
old=
porttaken=0
tmuxid=
log=

file=$1
shift
fext="${file##*.}"

if [ -z $file ] || [ $file = "-h" ] || [ $file = "--help" ]; then
    show_usage
    exit 1
fi

if [ "$fext" != "jxe" ]; then
    die "Extension on $file is not .jxe"
fi


while :; do
    case $1 in
        -h|-\?|--help)
            show_usage      # Display a usage synopsis.
            exit
            ;;
        -a|--app)           # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                app=$2
                shift
            else
                die 'ERROR: "--app" requires a non-empty option argument.'
            fi
            ;;
        --app=?*)
            app=${1#*=}     # Delete everything up to "=" and assign the remainder.
            ;;
        --app=)            # Handle the case of an empty
            die 'ERROR: "--args" requires a non-empty option argument.'
            ;;

        -t|--tags)           # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                tags=$2
                shift
            else
                die 'ERROR: "--tags" requires a non-empty option argument.'
            fi
            ;;
        --tags=?*)
            tags=${1#*=}     # Delete everything up to "=" and assign the remainder.
            ;;
        --tags=)            # Handle the case of an empty
            die 'ERROR: "--tags" requires a non-empty option argument.'
            ;;
        -m|--tmux)           # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                tmuxid=$2
                shift
            else
                die 'ERROR: "--tmux" requires a non-empty option argument.'
            fi
            ;;
        --tmux=?*)
            tmuxid=${1#*=}     # Delete everything up to "=" and assign the remainder.
            ;;
        --tmux=)            # Handle the case of an empty
            die 'ERROR: "--tmux" requires a non-empty option argument.'
            ;;
        -n|--num)           # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                num=$2
                shift
            else
                die 'ERROR: "--num" requires a non-empty option argument.'
            fi
            ;;
        --num=?*)
            num=${1#*=}     # Delete everything up to "=" and assign the remainder.
            ;;
        --num=)            # Handle the case of an empty
            die 'ERROR: "--num" requires a non-empty option argument.'
            ;;
        -d|--data)           # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                data=$2
                shift
            else
                die 'ERROR: "--data" requires a non-empty option argument.'
            fi
            ;;
        --data=?*)
            data=${1#*=}     # Delete everything up to "=" and assign the remainder.
            ;;
        --data=)            # Handle the case of an empty
            die 'ERROR: "--data" requires a non-empty option argument.'
            ;;
        -f|--fog)
            if [ "$type" != "device" ]; then
                die 'ERROR: "type" cannot be reassigned.'
            else
                type="fog"
                num=
            fi
            ;;
        -c|--cloud)
            if [ "$type" != "device" ]; then
                die 'ERROR: "type" cannot be reassigned.'
            else
                type="cloud"
                num=
            fi
            ;;
        -b|--bg)
            bg=1
            ;;
        -l|--log)
            log=1
            ;;
        -o|--old)
            old=1
            ;;
        --)              # End of all options.
            shift
            break
        ;;
        -?*)
            printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
            ;;
        *)               # Default case: No more options, so break out of the loop.
            break
    esac

    shift
done

# Check necessary parameters and set defaults

if [ "$type" != "device" ] && [ -n "$num" ]; then
    die "number of devices can't be speciied for fog/cloud"
fi


if [ -e "$file" ]; then

    # Check whether the global __jamruns folder is there
    jamfolder=$HOME"/__jamruns"
    create_missingdir $jamfolder

    # Check whether the app folder is there
    appfolder=$jamfolder/apps
    create_missingdir $appfolder

    # Get the folder
    filenoext="${file%.*}"
    folder=$appfolder/$filenoext"_"$app
    create_missingdir $folder

    if [ -z $old ]; then
        # unzip the executable in the folder and run it..
        # We are unzipping the copying the files no matter what!
        unzip -oq $file -d $folder
        if [ $? -ne 0 ]; then
            die "Problem reading file: $file"
        fi
    fi

    cd $folder

    resolvedocker $data

    if [ -e jamout.js ]; then
        # save the current program information for short cut use
        save "$filenoext" $appfolder/program
        save "$app" $appfolder/app

        # execute the program.. we are in the folder..
        case $type in
            cloud)
                iport=9883
                create_lock_or_wait $folder $type
                while [ : ]; do
                    portavailable $folder $iport
                    [[ $porttaken == 1 ]] || break
                    ((iport++))
                done
                ( sleep 5; remove_lock $folder $type ) &
                create_missingdir $folder/$iport
                getappid $jamfolder $folder/$iport $app
                dojamout $type $iport $folder
            ;;
            fog)
                iport=5883
                create_lock_or_wait $folder $type
                while [ : ]; do
                    portavailable $folder $iport
                    [[ $porttaken == 1 ]] || break
                    ((iport++))
                done
                ( sleep 5; remove_lock $folder $type ) &
                create_missingdir $folder/$iport
                getappid $jamfolder $folder/$iport $app
                dojamout $type $iport $folder
            ;;
            device)
                iport=1883
                create_lock_or_wait $folder $type
                while [ : ]; do
                    portavailable $folder $iport
                    [[ $porttaken == 1 ]] || break
                    ((iport++))
                done
                ( sleep 5; remove_lock $folder $type ) &

                create_missingdir $folder/$iport
                getappid $jamfolder $folder/$iport $app
                dojamout_p1 $type $iport $folder
                setuptmux $folder/$iport
                doaout $num $iport
                dojamout_p2 $type $iport $folder
                if [ -z $bg ]; then
                    cleanuptmux
                fi
            ;;
        esac
    else
        die "File: $file is not a valid JAMScript executable"
    fi

else
    die "File: $file not found"
fi
