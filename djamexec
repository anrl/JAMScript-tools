#!/bin/bash

# djam exec file --target=prog --app=app_name

# We reuse the containers of the existing program run: MQTT, Redis and all ports
# need to be the same.
# IMPORTANT to form the correct local execution command!!

die() {
    printf '%s\n' "$1" >&2
    exit 1
}

show_usage() {
    cat << EOF

djamexec --target=program --app=appl_name command

NOTE: here the command is at the end!

"command" could be file.jxe or some Linux command (e.g., ls) with arguments.

This "command" will be executed in the docker containers that are already
running the target program under the given application name (appl_name).

If no running instance is found, an error message will be printed.

EOF
}

if [ -z $1 ]; then
    show_usage
    exit 0
fi


checkdocker() {

    if [ -e $1/dockerId ]; then
        local didp=`cat $1/dockerId`
        local present=`docker ps --filter id=$didp | grep $didp | wc -l`
        if [ $present == "1" ]; then
            running="docker"
        else
            running="none"
        fi
    fi
}


app=
target=

while :; do
    case $1 in
        -h|-\?|--help)
            show_usage      # Display a usage synopsis.
            exit
            ;;
        -a|--app)           # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                app=$2
                shift
            else
                die 'ERROR: "--app" requires a non-empty option argument.'
            fi
            ;;
        --app=?*)
            app=${1#*=}     # Delete everything up to "=" and assign the remainder.
            ;;
        --app=)             # Handle the case of an empty
            die 'ERROR: "--app" requires a non-empty option argument.'
            ;;

        -t|--target)           # Takes an option argument; ensure it has been specified.
            if [ "$2" ]; then
                target=$2
                shift
            else
                die 'ERROR: "--target" requires a non-empty option argument.'
            fi
            ;;
        --target=?*)
            target=${1#*=}     # Delete everything up to "=" and assign the remainder.
            ;;
        --target=)             # Handle the case of an empty
            die 'ERROR: "--target" requires a non-empty option argument.'
            ;;
        --)                 # End of all options.
            shift
            break
        ;;
        -?*)
            printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
            ;;
        *)               # Default case: No more options, so break out of the loop.
            break
    esac

    shift
done

file=$1
shift
rest=$*

# Check folder
jamfolder=$HOME"/__jamruns/apps"
if [ ! -d $jamfolder ]; then
    die "ERROR! No running instance found. "
fi

if [ -z $target ]; then
    die "Target not specified.. cannot locate the running application."
fi

tname="${target%.*}"
tname=$tname"_"$app
fext="${file##*.}"


if [ "$(ls -A $jamfolder)" ]; then

    cd $jamfolder

    for jruns in `ls $jamfolder/$tname`; do
        dir=$jamfolder/$tname/$jruns
        if [ -d $dir ]; then
            checkdocker $dir
            if [ $running == "docker" ]; then
                type=`cat $dir/machType`
                data=`cat $dir/dataStore`
                runon=`cat $dir/dockerId`
                case $type in
                    cloud)
                        if [ $fext == "jxe" ]; then
                            djamrun $file --app=$app --cloud --data=$data --runon=$runon
                        else
                            docker exec -it $runon $file $rest
                        fi
                    ;;
                    fog)
                        if [ $fext == "jxe" ]; then
                            djamrun $file --app=$app --fog --data=$data --runon=$runon
                        else
                            docker exec -it $runon $file $rest
                        fi
                    ;;
                    device)
                        if [ $fext == "jxe" ]; then
                            djamrun $file --app=$app  --data=$data --runon=$runon --num=`cat $dir/cdevs`
                        else
                            docker exec -it $runon $file $rest
                        fi
                    ;;
                esac
            fi
        fi
    done
fi
